#include <iostream>
#include <fstream>
#include <random>
#include <cstdlib>
#include "Genome.hpp"

using namespace SAHap;
using namespace std;

int main(int argc, char *argv[]) {
	if (argc < 2 || argc > 4) {
		cerr << "Usage: " << argv[0] << " <reads> [gt] [millions of iterations = 10]" << endl;
		return 1;
	}

	ifstream file;
	file.open(argv[1]);
	auto parsed = WIFInputReader::read(file, 2);

	if (argc > 3) {
		ifstream gtruth;
		gtruth.open(argv[2]);

		WIFInputReader::readGroundTruth(gtruth, parsed);
	}

	iteration_t iterations = argc == 4 ? atoi(argv[3]) * META_ITER : atoi(argv[2]) * META_ITER;
	
	try {
		Genome ge(parsed);
		ge.autoSchedule(iterations);
			try {
				ge.optimize(true);
				cout << ge;
			} catch (const char * e) {
				cerr << e << endl;
			}
		// }

		/*
		// cout << ge.haplotypes[0].percentAgree() << endl;
		for (float e = -5; e <= 2; e += 0.1) {
			float temp = pow(10, e);
			auto pbad = ge.findPbad(temp);
			cout << temp << " " << pbad << endl;
		}
		*/

	} catch (const char* e) {
		cout << e << endl;
	}

	// ge.optimize();

	// /*
	// for (float e = -10; e <= 10; ++e) {
	// 	float temp = pow(10, e);
	// 	cout << temp << ": " << ge.findPbad(temp) << endl;
	// }
	// */
	// /*
	// for (float i = 1; i > 0; i -= 0.1f) {
	// 	cout << "pBad @ " << i << " = " << ge.findPbad(100) << endl;
	// }
	// */

	/*
	
	12103311031220000123230023022220212001001332121300223323122231313100013220132331210333013232002002013322332113030101101312022101130212223110011132032312102003331230202312323203021220012012010032133303031320113202202102123022121023120212201203312100032003213321023010012113113220033120033022031201323130132020010200213223321131303231301133100123322003312231001130300110102223032203320200331302020221111323321032333103330100333123220312102131222201030121322233333110310330132320000003122121301311110003

	
	

	
	
	*/

	return 0;
}

